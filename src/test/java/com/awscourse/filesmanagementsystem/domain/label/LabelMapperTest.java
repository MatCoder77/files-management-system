package com.awscourse.filesmanagementsystem.domain.label;

import com.awscourse.filesmanagementsystem.api.label.LabelDTO;
import com.awscourse.filesmanagementsystem.domain.label.boundary.LabelMapper;
import com.awscourse.filesmanagementsystem.domain.label.control.LabelService;
import com.awscourse.filesmanagementsystem.domain.label.entity.Label;
import com.awscourse.filesmanagementsystem.domain.label.entity.LabelType;
import com.awscourse.filesmanagementsystem.domain.user.boundary.UserMapper;
import com.awscourse.filesmanagementsystem.domain.user.entity.User;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

import java.util.*;


@DisplayName("LabelMapper Test")
@ExtendWith(MockitoExtension.class)
public class LabelMapperTest {

    private LabelMapper labelMapper;
    @Mock
    private UserMapper userMapper;
    @Mock
    private LabelService labelService;

    @BeforeEach
    public void setUp(){
        labelMapper = new LabelMapper(userMapper, labelService);

    }

    @Test
    public void mapToLabelsCorrectionTest(){
        List<LabelDTO> labelDTOs = fillCollectionOfLabelDTOs();
        List<Label> labels = labelMapper.mapToLabels(labelDTOs);

        AssertEqualityListsOfLabelAndListOfLabelDTO(labels, labelDTOs);
    }

    @Test
    public void mapToLabelCorrectionTest(){
        LabelDTO labelDTO = createTestLabelDTO(1L, "TestName");
        Label label = labelMapper.mapToLabel(labelDTO);
        AssertIsLabelIsEqualToLabelDTO(label, labelDTO);
    }

    @Test
    public void mapToLabelNegativeTest(){
        LabelDTO labelDTO_1 = createTestLabelDTO(1L, "FirstTestName");
        LabelDTO labelDTO_2 = createTestLabelDTO(99L, "SecondTestName");
        Label label = labelMapper.mapToLabel(labelDTO_1);
        AssertIsLabelIsNotEqualToLabelDTO(label, labelDTO_2);
    }

    private void AssertEqualityListsOfLabelAndListOfLabelDTO(List<Label> labels, List<LabelDTO> labelDTOs) {
        Assertions.assertEquals(labels.size(), labelDTOs.size());
        for (int i=0; i < labels.size(); i++){
            Assertions.assertTrue(IsLabelIsEqualToLabelDTO(labels.get(i), labelDTOs.get(i)));
        }
    }

    private List<LabelDTO> fillCollectionOfLabelDTOs(){
        List<LabelDTO> labelsDTOs = new ArrayList<>(100);
        String name;
        Long id;
        for(int i =0; i < 100; i++){
            name = "TestLabel" + i;
            labelsDTOs.add(createTestLabelDTO(i+1L, name));
        }
        return labelsDTOs;
    }

    private boolean IsLabelIsEqualToLabelDTO(Label label, LabelDTO labelDTO){
        boolean flag = true;
        if ( !label.getId().equals(labelDTO.getId()))
            flag = false;
        else if (!label.getName().equals(labelDTO.getName()))
            flag = false;
        else if (!label.getDescription().equals(labelDTO.getDescription()))
            flag = false;
        else if (!label.getLabelType().equals(labelDTO.getLabelType()))
            flag = false;

        return flag;
    }

    private void AssertIsLabelIsEqualToLabelDTO(Label label, LabelDTO labelDTO){
        Assertions.assertEquals(label.getId(), labelDTO.getId());
        Assertions.assertEquals(label.getName(), labelDTO.getName());
        Assertions.assertEquals(label.getDescription(), labelDTO.getDescription());
        Assertions.assertEquals(label.getLabelType(), labelDTO.getLabelType());
    }

    private void AssertIsLabelIsNotEqualToLabelDTO(Label label, LabelDTO labelDTO){
        Assertions.assertNotEquals(label.getId(), labelDTO.getId());
        Assertions.assertNotEquals(label.getName(), labelDTO.getName());
    }

    private LabelDTO createTestLabelDTO(Long id, String name){
        LabelDTO labelDTO = LabelDTO.builder()
                .id(id)
                .name(name)
                .description("TestDescription")
                .labelType(LabelType.AUTOGENERATED)
                .build();
        return labelDTO;
    }

    private User createTestUser(){
        return User.builder()
                .id(123L)
                .name("Test")
                .build();
    }

}